---
export interface Props {
  href: string;
  className?: string;
  ariaLabel?: string;
}

const { href, className = "", ariaLabel } = Astro.props;
const uniqueId = `ripple-btn-${Math.random().toString(36).substr(2, 9)}`;
---

<a 
  href={href} 
  class={`relative overflow-hidden ${className}`}
  id={uniqueId}
  aria-label={ariaLabel}
>
  <slot />
</a>

<script>
  // Ripple effect for buttons
  document.addEventListener('astro:page-load', () => {
    const buttons = document.querySelectorAll('[id^="ripple-btn-"]')
    
    buttons.forEach(button => {
      button.addEventListener('mousedown', createRipple as EventListener)
      button.addEventListener('touchstart', createRipple as EventListener)
    })
  })

  function createRipple(event: MouseEvent | TouchEvent) {
    const button = event.currentTarget as HTMLElement
    const rect = button.getBoundingClientRect()
    
    // Get click position
    const x = (event instanceof MouseEvent ? event.clientX : event.touches[0].clientX) - rect.left
    const y = (event instanceof MouseEvent ? event.clientY : event.touches[0].clientY) - rect.top
    
    // Create ripple element
    const ripple = document.createElement('span')
    const size = Math.max(rect.width, rect.height)
    
    ripple.style.cssText = `
      position: absolute;
      left: ${x - size / 2}px;
      top: ${y - size / 2}px;
      width: ${size}px;
      height: ${size}px;
      background: ${document.documentElement.classList.contains('dark') ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'};
      border-radius: 50%;
      transform: scale(0);
      animation: ripple-animation 0.6s ease-out;
      pointer-events: none;
      z-index: 5;
    `
    
    button.appendChild(ripple)
    
    // Remove ripple after animation
    setTimeout(() => {
      ripple.remove()
    }, 600)
  }
</script>

<style>
  @keyframes ripple-animation {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style>
