---
import HeadSeo from '@/components/HeadSeo.astro'
import Nav from '@/components/navigation/Nav.astro'
import { ViewTransitions } from 'astro:transitions'
import { type Frontmatter } from '@/types'
import { DEFAULT_LANGUAGE_CODE } from '@/config'

// font
import '@fontsource/karla/400.css'
import '@fontsource/karla/500.css'
import '@fontsource/karla/700.css'

// 添加 Noto Sans 字体支持 - 同时支持中文、日文、英文
import '@fontsource/noto-sans/400.css'
import '@fontsource/noto-sans/500.css'
import '@fontsource/noto-sans/600.css'
import '@fontsource/noto-sans/700.css'

// 添加 Noto Serif 字体支持
import '@fontsource/noto-serif/400.css'
import '@fontsource/noto-serif/500.css'
import '@fontsource/noto-serif/600.css'
import '@fontsource/noto-serif/700.css'

// 添加 Noto Serif Japanese 字体支持
import '@fontsource/noto-serif-jp/400.css'
import '@fontsource/noto-serif-jp/500.css'
import '@fontsource/noto-serif-jp/600.css'
import '@fontsource/noto-serif-jp/700.css'

// 添加 Font Awesome 图标支持
import '@fortawesome/fontawesome-free/css/all.css'

// custom styling
import '@/styling/scrollbar.css'
import '@/styling/code.css'
import '@/styling/custom-prose.css'

const { frontmatter } = Astro.props as {
  frontmatter?: Frontmatter
}

// 获取当前页面语言
const lang = Astro.url.pathname.split('/')[1] || DEFAULT_LANGUAGE_CODE
---

<style is:global>
  /* 基础字体设置 */
  body {
    font-family: 'Noto Serif JP', 'Noto Serif', 'Noto Sans', sans-serif;
    font-weight: 300;
  }
  
  /* 英文页面使用 Noto Serif */
  [lang="en"] {
    font-family: 'Noto Serif', 'Noto Serif JP','Noto Sans', sans-serif !important;
  }
  
  [lang="en"] * {
    font-family: 'Noto Serif', 'Noto Serif JP','Noto Sans', sans-serif !important;
  }
  
  /* 日文页面使用 Noto Serif JP */
  [lang="jp"] {
    font-family: 'Noto Serif','Noto Serif JP', 'Noto Sans', sans-serif !important;
  }
  
  [lang="jp"] * {
    font-family: 'Noto Serif', 'Noto Serif JP', 'Noto Sans', sans-serif !important;
  }
  
  /* 强制覆盖 Tailwind 的字体设置 */
  .prose[lang="jp"] *,
  .prose-lg[lang="jp"] *,
  .prose-sm[lang="jp"] *,
  .custom-prose[lang="jp"] * {
    font-family: 'Noto Serif JP', 'Noto Serif', 'Noto Sans', sans-serif !important;
  }
  
  .prose[lang="en"] *,
  .prose-lg[lang="en"] *,
  .prose-sm[lang="en"] *,
  .custom-prose[lang="en"] * {
    font-family: 'Noto Serif', 'Noto Sans', sans-serif !important;
  }
</style>

<html data-theme="github-light">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <HeadSeo type="website" frontmatter={frontmatter} />
    <script src="https://unpkg.com/lucide@latest"></script>
    <script>
      document.addEventListener('DOMContentLoaded', () => {
        (window as any).lucide.createIcons();
      });
      document.addEventListener('astro:after-swap', () => {
        (window as any).lucide.createIcons();
      });
    </script>
  </head>
  <body class="text-lightModeText dark:text-darkModeText" lang={lang}>
    <Nav />
    <div
      class="fixed left-0 top-0 z-[-2] h-screen w-full bg-lightModeBg bg-lightModeGradient transition-colors duration-[inherit] dark:bg-darkModeBg dark:bg-darkModeGradient"
    >
    </div>
    <div class="pt-20">
      <slot />
    </div>
    
    <!-- Desktop search results overlay -->
    <div id="desktop-search-overlay" class="fixed inset-0 top-20 z-40 hidden bg-lightModeBg bg-lightModeGradient dark:bg-darkModeBg dark:bg-darkModeGradient">
      <div class="h-full flex flex-col">
        <div class="flex-1 overflow-y-auto">
          <div class="mx-auto max-w-4xl px-8 py-8">
            <div id="desktop-search-results-content">
              <!-- Search results will be populated here -->
            </div>
          </div>
        </div>
        
        <!-- Footer with logo signature for search results - fixed at bottom -->
        <footer class="pb-8 text-center flex-shrink-0">
          <div class="mx-auto max-w-4xl px-5">
            <div class="flex flex-col items-center space-y-2">
              <!-- Logo signature -->
              <div class="h-12 flex items-center justify-center">
                <img 
                  src="/images/logo4_day.png" 
                  alt="Blog signature logo" 
                  class="h-12 w-auto opacity-70 hover:opacity-100 hover:scale-110 transition-all duration-300 ease-out dark:hidden"
                />
                <img 
                  src="/images/logo4_night.png" 
                  alt="Blog signature logo" 
                  class="h-12 w-auto opacity-70 hover:opacity-100 hover:scale-110 transition-all duration-300 ease-out hidden dark:block"
                />
              </div>
              <!-- Copyright text -->
              <p class="text-xs opacity-60 leading-none">
                © 2025 Yui Amai. Built with Astro and Stellar theme.
              </p>
            </div>
          </div>
        </footer>
      </div>
    </div>
    
    <!-- Footer with logo signature -->
    <footer class="mt-4 pb-8 text-center">
      <div class="mx-auto max-w-4xl px-5">
        <div class="flex flex-col items-center space-y-2">
          <!-- Logo signature - only show on non-homepage -->
          {Astro.url.pathname !== '/' && Astro.url.pathname !== '/jp' && Astro.url.pathname !== '/en' && (
            <>
              <div class="h-12 flex items-center justify-center">
                <img 
                  src="/images/logo4_day.png" 
                  alt="Blog signature logo" 
                  class="h-12 w-auto opacity-70 hover:opacity-100 hover:scale-110 transition-all duration-300 ease-out dark:hidden"
                />
                <img 
                  src="/images/logo4_night.png" 
                  alt="Blog signature logo" 
                  class="h-12 w-auto opacity-70 hover:opacity-100 hover:scale-110 transition-all duration-300 ease-out hidden dark:block"
                />
              </div>
            </>
          )}
          <!-- Copyright text -->
          <p class="text-xs opacity-60 leading-none">
            © 2025 Yui Amai. Built with Astro and Stellar theme.
          </p>
        </div>
      </div>
    </footer>
  </body>
</html>

<script>
  import {
    LIGHT_MODE_CODE_BLOCK_THEME,
    DARK_MODE_CODE_BLOCK_THEME,
  } from '@/config'

  function init() {
    document.documentElement.classList.add('scroll-smooth')
    // adding scroll-smooth class to html tag manually didn't work so I'm adding that class this way

    if (
      localStorage.theme === 'dark' ||
      (!('theme' in localStorage) &&
        window.matchMedia('(prefers-color-scheme: dark)').matches)
    ) {
      document.documentElement.classList.add('dark')
      document.documentElement.setAttribute(
        'data-theme',
        DARK_MODE_CODE_BLOCK_THEME as string,
      )
    } else {
      document.documentElement.classList.remove('dark')
      document.documentElement.setAttribute(
        'data-theme',
        LIGHT_MODE_CODE_BLOCK_THEME as string,
      )
    }

    setTimeout(() => {
      document.body.classList.add('duration-300', 'transition-colors')
    }, 300)

    // im adding those classes with 300ms delay, so theres no flashing on inital page load
    
    // Listen for search state changes
    window.addEventListener('searchStateChange', (event: any) => {
      const isSearching = event.detail.isSearching
      const searchOverlay = document.getElementById('desktop-search-overlay')
      const searchResultsContent = document.getElementById('desktop-search-results-content')
      
      if (searchOverlay && searchResultsContent) {
        if (isSearching) {
          searchOverlay.classList.remove('hidden')
          // Populate search results
          populateDesktopSearchResults(searchResultsContent)
        } else {
          searchOverlay.classList.add('hidden')
          searchResultsContent.innerHTML = ''
        }
      }
    })
  }
  
  function populateDesktopSearchResults(container: HTMLElement) {
    // This function will be called by the Search component to populate results
    // For now, we'll add a placeholder
    container.innerHTML = `
      <div class="text-center py-20">
        <h2 class="text-2xl font-medium text-black/80 dark:text-white/80 mb-4">検索結果</h2>
        <p class="text-black/60 dark:text-white/60">検索を開始してください...</p>
      </div>
    `
  }
  
  // Global function to populate search results
  (window as any).populateDesktopSearchResults = function(results: any[], message: string | null, lang: string) {
    const container = document.getElementById('desktop-search-results-content')
    if (!container) return
    
    if (results.length > 0) {
      const titleText = lang === 'en' ? 'Search Results' : '検索結果'
      const countText = lang === 'en' 
        ? `${results.length} result${results.length === 1 ? '' : 's'} found`
        : `${results.length} 件の結果が見つかりました`
      
      let html = `
        <div class="mb-6">
          <h2 class="text-2xl font-medium text-black/80 dark:text-white/80 mb-4">${titleText}</h2>
          <p class="text-base text-black/60 dark:text-white/60 mb-6">${countText}</p>
        </div>
        <div class="space-y-0">
      `
      
      results.forEach((item, index) => {
        html += `
          <div class="p-4 cursor-pointer transition-all duration-300 ease-out border-b border-black/10 dark:border-white/10" data-index="${index}">
            <div class="flex items-center gap-2 mb-2">
              <h3 class="font-medium text-black/80 dark:text-white/80 text-lg">${item.title}</h3>
              ${item.lang ? `<span class="text-xs px-2 py-1 rounded-full ${
                item.lang === 'jp' 
                  ? 'bg-[#C7D9DD] text-[#2D3748] dark:bg-[#2D6E7E] dark:text-[#e5e7eb]' 
                  : 'bg-[#ADB2D4] text-[#2D3748] dark:bg-[#9290C3] dark:text-[#e5e7eb]'
              }">${item.lang === 'jp' ? 'JP' : 'EN'}</span>` : ''}
            </div>
            <p class="text-base text-black/60 dark:text-white/60 mt-2">${item.description}</p>
          </div>
        `
      })
      
      html += '</div>'
      container.innerHTML = html
      
      // Add click handlers and hover effects
      const resultItems = container.querySelectorAll('[data-index]')
      resultItems.forEach((item) => {
        const index = parseInt(item.getAttribute('data-index') || '0')
        
        // Add hover effect with rounded corners
        item.addEventListener('mouseenter', () => {
          item.classList.add('rounded-lg', 'bg-black/5', 'dark:bg-white/5')
        })
        
        item.addEventListener('mouseleave', () => {
          item.classList.remove('rounded-lg', 'bg-black/5', 'dark:bg-white/5')
        })
        
        item.addEventListener('click', () => {
          window.location.href = results[index].url || '#'
        })
      })
    } else if (message) {
      const titleText = lang === 'en' ? 'Search Results' : '検索結果'
      container.innerHTML = `
        <div class="text-center py-20">
          <h2 class="text-2xl font-medium text-black/80 dark:text-white/80 mb-4">${titleText}</h2>
          <p class="text-base text-black/60 dark:text-white/60">${message}</p>
        </div>
      `
    }
  }

  init()
  document.addEventListener('astro:after-swap', init)
</script>
